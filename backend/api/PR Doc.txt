# 🚀 Implémentation des Routes API FastAPI

## Description
Cette PR implémente toutes les routes API FastAPI requises pour le projet SCIRAG, avec des schémas Pydantic complets pour la validation des données et la documentation OpenAPI.

## Routes implémentées

### 🗨️ Conversations
- ✅ GET/POST/PUT/DELETE pour la gestion des conversations
- ✅ Envoi de messages avec contexte RAG/Notes
- ✅ Activation/désactivation de contextes

### 🧠 Configurations LLM
- ✅ GET/POST/PUT/DELETE pour la gestion des configurations LLM
- ✅ Liste des fournisseurs disponibles
- ✅ Test de configurations

### 📄 RAG Corpus
- ✅ GET/POST/PUT/DELETE pour la gestion des corpus RAG
- ✅ Upload de documents PDF
- ✅ Recherche sémantique (placeholder)

### 📝 Notes
- ✅ GET/POST/PUT/DELETE pour la gestion des notes
- ✅ Processus de chunking et embedding (placeholder)
- ✅ Recherche sémantique (placeholder)

## Détails techniques

- Tous les endpoints respectent la convention RESTful
- Validation des données avec Pydantic (Create/Update/Response schemas)
- Documentation OpenAPI complète avec descriptions
- Dépendances centralisées pour les besoins communs
- Script de test automatisé pour vérifier les routes

## Points d'intégration à venir

Les services suivants sont préparés comme placeholders pour être intégrés dans les prochaines PR :

1. **Service LLM** - Connection avec les API des fournisseurs (Claude, GPT, etc.)
2. **Service RAG** - Chunking, embeddings et recherche vectorielle
3. **Service de Fichiers** - Gestion des PDF et autres documents

## Tests

La PR inclut :
- Un script `test_api.py` qui permet de vérifier automatiquement les principales routes
- La documentation OpenAPI accessible via /docs pour tester manuellement

Pour lancer l'API et tester :
```bash
cd backend
uvicorn main:app --reload
```
Puis, dans un autre terminal :
```bash
cd backend
python scripts/test_api.py
```

## Capture d'écran

![API Swagger Doc](https://example.com/swagger-screenshot.png)